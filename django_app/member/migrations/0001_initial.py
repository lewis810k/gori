# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-04-23 11:05
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import member.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='GoriUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(error_messages={'invalid': 'your custom error message'}, max_length=30)),
                ('nickname', models.CharField(blank=True, max_length=15)),
                ('cellphone', models.CharField(blank=True, max_length=11)),
                ('profile_image', models.ImageField(blank=True, default='member/profile_image/default_profile.png', upload_to='member/profile_image')),
                ('user_type', models.CharField(choices=[('d', 'Django'), ('f', 'Facebook')], default='d', max_length=1)),
                ('joined_date', models.DateTimeField(auto_now_add=True)),
                ('is_tutor', models.BooleanField(default=False)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
            ],
            options={
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
                'abstract': False,
            },
            managers=[
                ('objects', member.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Tutor',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('joined_date', models.DateTimeField(auto_now_add=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_method', models.CharField(choices=[('UN', '대학생'), ('GR', '대학원생'), ('ID', '신분증')], default='ID', max_length=2)),
                ('verification_images', models.ImageField(upload_to='member/verification_image')),
                ('school', models.CharField(blank=True, max_length=30)),
                ('major', models.CharField(blank=True, max_length=30)),
                ('current_status', models.CharField(blank=True, choices=[('G', '졸업'), ('E', '재학'), ('I', '수료')], max_length=1)),
            ],
        ),
        migrations.AddField(
            model_name='goriuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='goriuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
